/*!
 * @chai-stuff/same-props v0.3.1
 * 
 * Check that two objects have all the same properties (keys and values) but don't check that the objects' constructors are the same.
 * 
 * Copyright (c) 2019-present, ScottRudiger (https://github.com/ScottRudiger)
 * 
 * This source code is licensed under the MIT license found in the root of this package.
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var ChaiStuffError =
/*#__PURE__*/
function (_Error) {
  _inherits(ChaiStuffError, _Error);

  function ChaiStuffError() {
    _classCallCheck(this, ChaiStuffError);

    return _possibleConstructorReturn(this, _getPrototypeOf(ChaiStuffError).apply(this, arguments));
  }

  return ChaiStuffError;
}(_wrapNativeSuper(Error));

var fillObj = function fillObj(nonObj) {
  return [].concat(_toConsumableArray(Object.getOwnPropertyNames(nonObj)), _toConsumableArray(Object.getOwnPropertySymbols(nonObj))).reduce(function (obj, key) {
    return _objectSpread({}, obj, {
      [key]: nonObj[key]
    });
  }, {});
};

var getOwnSortedPropertyNames = function getOwnSortedPropertyNames(obj) {
  return Object.getOwnPropertyNames(obj).sort();
};

var strictEqual = function strictEqual(actual, expected) {
  if (actual !== expected) throw new ChaiStuffError(`expected ${actual} to equal ${expected}`);
};

var types = new Map([[Map, function (map) {
  return _toConsumableArray(map).reduce(function (obj, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        val = _ref2[1];

    return _objectSpread({}, obj, {
      [key]: val
    });
  }, {});
}], [Set, function (set) {
  return _toConsumableArray(set);
}], [WeakMap, function () {
  throw new ChaiStuffError('WeakMaps cannot be compared');
}], [WeakSet, function () {
  throw new ChaiStuffError('WeakSets cannot be compared');
}], [Number, function (num) {
  return _objectSpread({
    Number: +num
  }, num);
}], [String, function (str) {
  return fillObj(str);
}], [Boolean, function (bool) {
  return _objectSpread({
    Boolean: bool.valueOf()
  }, bool);
}]]);

var getSameProps = function getSameProps() {
  var alias = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'sameProps';
  return function (_ref, _ref2) {
    var assert = _ref.assert;
    var addMethod = _ref2.addMethod,
        inspect = _ref2.inspect;
    return addMethod(assert, alias, function (actual, expected, message) {
      var _actual = {
        original: actual,
        converted: actual
      };
      var _expected = {
        original: expected,
        converted: expected
      };

      try {
        if (Object(actual) !== actual || Object(expected) !== expected) return strictEqual(actual, expected);

        if (actual instanceof Error) {
          _actual.converted = fillObj(actual);
          delete _actual.converted.stack;
        }

        if (expected instanceof Error) {
          _expected.converted = fillObj(expected);
          delete _expected.converted.stack;
        }

        if (types.has(actual.constructor)) _actual.converted = types.get(actual.constructor)(actual);else if (actual[Symbol.iterator]) _actual.converted = _toConsumableArray(actual);
        if (types.has(expected.constructor)) _expected.converted = types.get(expected.constructor)(expected);else if (expected[Symbol.iterator]) _expected.converted = _toConsumableArray(expected);
        var actualKeys = getOwnSortedPropertyNames(_actual.converted);
        assert.deepEqual(actualKeys, getOwnSortedPropertyNames(_expected.converted));
        assert.isTrue(actualKeys.every(function (key) {
          return _actual.converted[key] === _expected.converted[key];
        }));
      } catch (err) {
        if (err instanceof ChaiStuffError) throw err;

        var prettify = function prettify(_ref3) {
          var original = _ref3.original,
              converted = _ref3.converted;
          return `${original && original.constructor && original.constructor.name || ''} ${inspect([Object, Array].some(function (Class) {
            return converted.constructor === Class;
          }) ? converted : fillObj(converted))}`;
        };

        err.message = message || `expected ${prettify(_actual)} to have the same properties as ${prettify(_expected)}`;
        err.showDiff = true;
        err.actual = _actual.converted;
        err.expected = _expected.converted;
        throw err;
      }
    });
  };
};

var sameProps = getSameProps();

var getSamePropsAlias = function getSamePropsAlias(alias) {
  return getSameProps(alias);
};

Object.defineProperty(sameProps, 'name', {
  value: 'sameProps',
  configurable: true
});

exports.getSamePropsAlias = getSamePropsAlias;
exports.sameProps = sameProps;
//# sourceMappingURL=index.js.map
